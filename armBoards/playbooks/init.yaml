---
- name: Init arm boards
  hosts: armBoards
  become: true
  remote_user: branson
  vars_files: 
    /Users/ericbranson/Documents/Cluster/armBoards/vault_vars.yaml
  vars:
    branson_password: "{{ lookup('community.general.onepassword',
      'music pi',
      field='password',
      vault='Ansible',
      service_account_token=auth_token)
      }}"
    ssh_key_path: "/home/branson/.ssh/{{ inventory_hostname }}_branson_id"
    ssh_key_pub: '{{ ssh_key_path }}.pub'
    blacklist: ['lo']
    devices: "{{ interfaces | map('extract', vars) | items2dict(key_name='device', value_name='address') }}"
  tasks:
    - name: Copy ssh-id from mac
      ansible.builtin.command:
        cmd: ssh-copy-id branson@{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}
      delegate_to: ericsMac
      delegate_facts: true
      connection: local
      become: true
      become_user: ericbranson
      vars:
        ansible_sudo_password: "{{ lookup('community.general.onepassword',
          'ericsMac',
          field='password',
          vault='Ansible',
          service_account_token=auth_token)
          }}"
    - name: Set hostname 
      ansible.builtin.hostname:
        name: '{{ inventory_hostname }}'
    - name: Generate SSH keys
      community.crypto.openssh_keypair:
        path: '{{ ssh_key_path }}'
        owner: branson
        mode: u=rw,go=r
        passphrase: branson_password
        state: present
      async: 600
      poll: 0
      register: ssh_keys_async
    - name: Set timezone
      community.general.timezone:
        name: America/Boise
    - name: Change password
      ansible.builtin.user:
        name: branson
        password: "{{ branson_password | password_hash('sha512') }}"
    - name: Branson sudoer
      community.general.sudoers:
        name: branson
        user: branson
        nopassword: true
        commands:
          - ALL
    - name: Update apt
      ansible.builtin.apt:
        update_cache: true
        upgrade: true
        cache_valid_time: 3600
    - name: Install thru apt
      ansible.builtin.apt:
        name: '{{ item }}'
      loop: 
        - build-essential
        - git
        - openssh-client
        - openssh-server
        - alsa-base
        - autoconf
        - automake
        - libpopt-dev
        - libconfig-dev
        - libasound2-dev
        - avahi-daemon
        - libavahi-client-dev
        - libssl-dev
        - libsoxr-dev
        - libplist-dev
        - libsodium-dev
        - libavutil-dev
        - libavcodec-dev
        - libavformat-dev
        - uuid-dev
        - libgcrypt-dev
        - xxd
        - zsh
        - python3-full
        - python3-pip
        - python3-setuptools
        - python3-bcrypt
        - python3-cryptography
        - python3-lgpio
        - pipx
      loop_control:
        label: "{{ item }}"
    - name: Pipx ensure path
      ansible.builtin.command:
        cmd: pipx ensurepath
      become: true
    - name: Install thru pipx
      community.general.pipx:
        name: thefuck
        state: present
    - name: Download install script
      ansible.builtin.command:
        cmd: wget https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh
        creates: /home/branson/install.sh
      become: true
      become_user: branson
    - name: Run omzInstall script
      ansible.builtin.command:
        cmd: sh /home/branson/install.sh --unattended
        creates: /home/branson/.oh-my-zsh/oh-my-zsh.sh
      become: true
      become_user: branson
    - name: Set Zsh Config
      ansible.builtin.copy:
        src: ~/Documents/Cluster/Multipass/configs/zshrc.conf
        dest: /home/branson/.zshrc
        owner: branson
        mode: '642'
    - name: Change shell
      ansible.builtin.user:
        name: branson
        shell: /bin/zsh
    - name: Clone wiringPi
      ansible.builtin.git:
        repo: https://github.com/WiringPi/WiringPi.git
        clone: true
        dest: /home/branson/wiringPi
    - name: Build wiringPi
      ansible.builtin.command:
        cmd: ./build debian
        chdir: /home/branson/wiringPi
    - name: Install wiring pi
      ansible.builtin.apt:
        deb: /home/branson/wiringPi/debian-template/wiringpi_3.0_arm64.deb
    - name: Check if keys are done
      ansible.builtin.async_status:
        jid: "{{ ssh_keys_async.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: 100
      delay: 20
      become: true
      vars:
        ansible_async_dir: '{{ ssh_keys_async.results_file | dirname }}'
    - name: Slurp key
      ansible.builtin.slurp:
        src: '{{ ssh_key_pub }}'
      register: pub_key
    - name: Set keys
      ansible.posix.authorized_key:
        user: branson
        state: present
        key: '{{ pub_key.content | b64decode }}'
        exclusive: true
    - name: Get keys for mac
      ansible.builtin.command:
        cmd: "ssh-keyscan {{ item }} >> ~/.ssh/known_hosts"
      loop: "{{ groups['armBoards'] }}"
      delegate_to: ericsMac 
      delegate_facts: true
      connection: local
      become: true
      vars:
        ansible_become_password: "{{ lookup('community.general.onepassword', 
        'macMini',
        field='password',
        vault='Ansible',
        service_account_token=auth_token) 
        }}"
    - name: Clone nqptp
      ansible.builtin.git:
        repo: https://github.com/mikebrady/nqptp.git
        clone: true
        dest: /home/branson/nqptp
    - name: Nqptp autoreconf 
      ansible.builtin.command:
        chdir: /home/branson/nqptp
        cmd: '{{ item }}'
      loop:
        - autoreconf -fi
        - ./configure --with-systemd-startup
        - make
    - name: Install nqptp
      ansible.builtin.command:
        cmd: make install
        chdir: /home/branson/nqptp
      become: true
    - name: Enable nqptp
      ansible.builtin.systemd_service:
        name: nqptp
        state: restarted
        enabled: true
    - name: Clone shairport-sync
      ansible.builtin.git:
        repo: https://github.com/mikebrady/shairport-sync.git
        clone: true
        dest: /home/branson/shairport-sync
    - name: Shairport-sync autoreconf
      ansible.builtin.command:
        chdir: /home/branson/shairport-sync
        cmd: '{{ item }}'
      loop:
        - autoreconf -fi
        - ./configure --sysconfdir=/etc --with-alsa --with-soxr --with-avahi --with-ssl=openssl --with-systemd --with-airplay-2
        - make
    - name: Install shairport-sync
      ansible.builtin.command:
        chdir: /home/branson/shairport-sync
        cmd: make install
      become: true
    - name: Make scripts dir
      ansible.builtin.file:
        state: directory
        path: /home/branson/scripts
        owner: branson
        mode: a=rwx
    - name: Make log file
      ansible.builtin.file:
        state: touch
        path: /home/branson/shairport-sync/log.log
        owner: branson
        mode: a=rw
    - name: Copy over conf file
      ansible.builtin.copy:
        src: /Users/ericbranson/Documents/Cluster/armBoards/shairport-sync.conf
        dest: /etc/shairport-sync.conf
        mode: a=rw
      # vars:
      #   airplay_name: "{{ hostvars  regex('/[A-Z-_\&](?=[a-z0-9]+)|[A-Z-_\&]+(?![a-z0-9])/g') }}"
    - name: Copy over relay on scripts
      ansible.builtin.copy:
        src: /Users/ericbranson/Documents/Cluster/armBoards/scripts
        dest: /home/branson/
        mode: ugo=rwx
        owner: branson
    - name: Enable shairport-sync
      ansible.builtin.systemd_service:
        name: shairport-sync
        state: restarted
        enabled: true
    # - name: Clone wiringOP
    #   ansible.builtin.git:
    #     repo: https://github.com/orangepi-xunlong/wiringOP.git
    #     clone: true
    #     dest: /home/branson/wiringOP
    #   when: ansible_facts['ansible_distribution'] is "armbian"
    #   register: wiringOP
    # - name: Build wiringOP
    #   ansible.builtin.command:
    #     chdir: /home/branson/wiringOP
    #     cmd: '{{ item }}'
    #   loop:
    #     - ./build clean
    #     - ./build
    #   when: wiringOp.result is changed
    # - name: Read gpio
    #   ansible.builtin.command:
    #     cmd: gpio readall
    #   register: gpio_readall
    #   when: wiringOp.result is changed
    # - name: Print gpio
    #   ansible.builtin.debug:
    #     var: gpio_readall
    #   when: wiringOp.result is changed
    - name: Auto remove
      ansible.builtin.apt:
        autoremove: true
    - name: Check if reboot required 3
      ansible.builtin.stat:
        path: /var/run/reboot-required
      register: reboot_required_file
    - name: Reboot if required 3
      ansible.builtin.reboot:
        connect_timeout: 5
        reboot_timeout: 10
        post_reboot_delay: 30
        test_command: uptime
      when: reboot_required_file.stat.exists == true
...
        