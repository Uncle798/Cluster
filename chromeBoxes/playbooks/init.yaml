---
- name: Initialize chromebox
  hosts: chromeboxes
  become: true
  remote_user: branson
  become_method: sudo
  gather_facts: false
  vars_files: 
    /Users/ericbranson/Documents/Cluster/chromeBoxes/vault_vars.yaml
  vars:
    ansible_become_password: "{{ branson_password }}"
    branson_password: "{{ lookup('community.general.onepassword',
      'chromeboxes',
      field='password',
      vault='Ansible',
      service_account_token=auth_token)
      }}"
    ssh_key_path: "/home/branson/.ssh/{{ inventory_hostname }}_branson_id"
    ssh_key_pub: '{{ ssh_key_path }}.pub'
  tasks:
    - name: Gather ansible_facts
      ansible.builtin.gather_facts:
      vars:
        ansible_become_password: branson
    - name: Set branson password
      ansible.builtin.expect:
        command: passwd branson
        responses:
          (?i)password: "{{ branson_password }}"
      no_log: true
      when: password_changed is undefined
      register: password_change
      vars: 
        ansible_become_password: branson
    - name: Set password change to true
      ansible.builtin.set_fact:
        password_changed: true
      when: password_change.changed is true
    - name: Fix network start delay
      ansible.builtin.copy:
        src: ~/Documents/Linux/systemd-networkd-wait-online.service
        dest: /etc/systemd/system/network-online.target.wants/systemd-networkd-wait-online.service
        owner: root
        mode: u=rwx,g=rx
    - name: Set timezone
      community.general.timezone:
        name: America/Boise
      vars:
    - name: Branson sudoer
      community.general.sudoers:
        name: branson
        user: branson
        nopassword: true
        commands:
          - ALL
    - name: Update apt
      ansible.builtin.apt:
        update_cache: true
        upgrade: true
        cache_valid_time: 3600
    - name: Check if reboot required
      ansible.builtin.stat:
        path: /var/run/reboot-required
      register: reboot_required_file
    - name: Reboot if required
      ansible.builtin.reboot:
        connect_timeout: 5
        reboot_timeout: 10
        post_reboot_delay: 30
        test_command: uptime
      when: reboot_required_file.stat.exists == true
    - name: Install thru apt
      ansible.builtin.apt:
        name: '{{ item }}'
      loop: 
        - build-essential
        - git
        - openssh-client
        - openssh-server
        - alsa-base
        - autoconf
        - automake
        - libpopt-dev
        - libconfig-dev
        - libasound2-dev
        - avahi-daemon
        - libavahi-client-dev
        - libssl-dev
        - libsoxr-dev
        - libplist-dev
        - libsodium-dev
        - libavutil-dev
        - libavcodec-dev
        - libavformat-dev
        - uuid-dev
        - libgcrypt-dev
        - xxd
        - zsh
        - python3-full
        - python3-pip
        - python3-setuptools
        - python3-bcrypt
        - python3-cryptography
        - python3-lgpio
        - pipx
        - thefuck
      loop_control:
        label: "{{ item }}"
    - name: Check if reboot required 2
      ansible.builtin.stat:
        path: /var/run/reboot-required
      register: reboot_required_file
    - name: Reboot if required
      ansible.builtin.reboot:
        connect_timeout: 5
        reboot_timeout: 10
        post_reboot_delay: 30
        test_command: uptime
      when: reboot_required_file.stat.exists == true
    - name: Generate SSH keys
      community.crypto.openssh_keypair:
        path: '{{ ssh_key_path }}'
        owner: branson
        mode: u=rw,go=r
        passphrase: branson_password
        state: present
      async: 600
      poll: 0
      register: ssh_keys_async
    - name: Download omz install script
      ansible.builtin.command:
        cmd: wget https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh
        creates: /home/branson/install.sh
    - name: Run omz install script
      ansible.builtin.command:
        cmd: sh /home/branson/install.sh --unattended
        creates: /home/branson/.oh-my-zsh/oh-my-zsh.sh
      become: false
    - name: Set Zsh Config
      ansible.builtin.copy:
        src: ~/Documents/Cluster/Multipass/configs/zshrc.conf
        dest: /home/branson/.zshrc
        owner: branson
        mode: ug=rw,
    - name: Change shell
      ansible.builtin.user:
        name: branson
        shell: /bin/zsh
    - name: Check if keys are done
      ansible.builtin.async_status:
        jid: "{{ ssh_keys_async.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: 100
      delay: 20
      become: true
      vars:
        ansible_async_dir: '{{ ssh_keys_async.results_file | dirname }}'
    - name: Slurp key
      ansible.builtin.slurp:
        src: '{{ ssh_key_pub }}'
      register: pub_key
    - name: Set keys
      ansible.posix.authorized_key:
        user: branson
        state: present
        key: '{{ pub_key.content | b64decode }}'
        exclusive: true
    - name: Get keys for mac
      ansible.builtin.shell:
        cmd: "ssh-keyscan {{ item }} >> ~/.ssh/known_hosts"
      loop: "{{ groups['chromeboxes'] }}"
      delegate_to: ericsMac 
      delegate_facts: true
      connection: local
      become: true
      become_user: ericbranson
      vars:
        ansible_become_password: "{{ lookup('community.general.onepassword', 
        'macMini',
        field='password',
        vault='Ansible',
        service_account_token=auth_token) 
        }}"
    - name: Auto remove
      ansible.builtin.apt:
        autoremove: true
    - name: Reboot
      ansible.builtin.reboot:
        connect_timeout: 5
        reboot_timeout: 600
        post_reboot_delay: 30
        test_command: uptime
... 